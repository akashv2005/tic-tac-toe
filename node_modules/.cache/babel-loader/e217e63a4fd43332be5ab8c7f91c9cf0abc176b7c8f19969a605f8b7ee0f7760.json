{"ast":null,"code":"var _jsxFileName = \"/home/akash-verma/Desktop/tic-tac-toe/src/game.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react'; // Import useState to manage the state\nimport './';\n// A Tile component that shows 'X', 'O', or stays empty\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Tile({\n  value,\n  onClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"tile\",\n    onClick: onClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\n// The main Board component to manage the game logic and display\n_c = Tile;\nfunction Board() {\n  _s();\n  const [squares, setSquares] = useState(Array(9).fill(null)); // Game board state\n  const [isXTurn, setIsXTurn] = useState(true); // Track whose turn it is\n\n  // Handle a click on a tile\n  function handleClick(index) {\n    if (squares[index] || findWinner(squares)) return; // Ignore if tile is filled or game over\n\n    const newSquares = squares.slice(); // Copy current board\n    newSquares[index] = isXTurn ? 'X' : 'O'; // Set 'X' or 'O' based on turn\n    setSquares(newSquares); // Update the board\n    setIsXTurn(!isXTurn); // Switch the turn\n  }\n\n  // Get the winner (if any)\n  const winner = findWinner(squares);\n  const status = winner ? `Winner: ${winner}` : `Next Player: ${isXTurn ? 'X' : 'O'}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: squares.map((value, index) => /*#__PURE__*/_jsxDEV(Tile, {\n        value: value,\n        onClick: () => handleClick(index)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n// Function to check if there is a winner\n_s(Board, \"DdkdKt+Ij3efjMejuftOJvvWiW0=\");\n_c2 = Board;\nfunction findWinner(squares) {\n  const winningCombinations = [[0, 1, 2], [3, 4, 5], [6, 7, 8],\n  // Rows\n  [0, 3, 6], [1, 4, 7], [2, 5, 8],\n  // Columns\n  [0, 4, 8], [2, 4, 6] // Diagonals\n  ];\n  for (let [a, b, c] of winningCombinations) {\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a]; // Return the winner ('X' or 'O')\n    }\n  }\n  return null; // No winner yet\n}\nexport default function TicTacToeGame() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_c3 = TicTacToeGame;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Tile\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"TicTacToeGame\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Tile","value","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","_s","squares","setSquares","Array","fill","isXTurn","setIsXTurn","handleClick","index","findWinner","newSquares","slice","winner","status","map","_c2","winningCombinations","a","b","c","TicTacToeGame","_c3","$RefreshReg$"],"sources":["/home/akash-verma/Desktop/tic-tac-toe/src/game.js"],"sourcesContent":["import { useState } from 'react';  // Import useState to manage the state\nimport './'\n// A Tile component that shows 'X', 'O', or stays empty\nfunction Tile({ value, onClick }) {\n  return (\n    <button className=\"tile\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\n// The main Board component to manage the game logic and display\nfunction Board() {\n  const [squares, setSquares] = useState(Array(9).fill(null));  // Game board state\n  const [isXTurn, setIsXTurn] = useState(true);  // Track whose turn it is\n\n  // Handle a click on a tile\n  function handleClick(index) {\n    if (squares[index] || findWinner(squares)) return;  // Ignore if tile is filled or game over\n\n    const newSquares = squares.slice();  // Copy current board\n    newSquares[index] = isXTurn ? 'X' : 'O';  // Set 'X' or 'O' based on turn\n    setSquares(newSquares);  // Update the board\n    setIsXTurn(!isXTurn);  // Switch the turn\n  }\n\n  // Get the winner (if any)\n  const winner = findWinner(squares);\n  const status = winner ? `Winner: ${winner}` : `Next Player: ${isXTurn ? 'X' : 'O'}`;\n\n  return (\n    <div>\n      <div className=\"status\">{status}</div>\n      <div className=\"board\">\n        {squares.map((value, index) => (\n          <Tile key={index} value={value} onClick={() => handleClick(index)} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Function to check if there is a winner\nfunction findWinner(squares) {\n  const winningCombinations = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8],  // Rows\n    [0, 3, 6], [1, 4, 7], [2, 5, 8],  // Columns\n    [0, 4, 8], [2, 4, 6]              // Diagonals\n  ];\n\n  for (let [a, b, c] of winningCombinations) {\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];  // Return the winner ('X' or 'O')\n    }\n  }\n  return null;  // No winner yet\n}\n\nexport default function TicTacToeGame() {\n  return (\n    <div className=\"game-container\">\n      <Board />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}